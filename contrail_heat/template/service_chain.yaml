heat_template_version: 2014-09-26

description: >
  HOT template to creates two virtual network with one subnet each. 
  Create a service template and a service instance
  Creates a network policy for applying service between two VNs created before.
  Attach the network policy to two virtual networks

parameters:
  name:
    type: string
    description: Name of service template
  mode:
    type: string
    description: service mode
  type:
    type: string
    description: service type
  image:
    type: string
    description: Name of the image
  flavor:
    type: string
    description: Flavor
  policy_name:
    type: string
    description: Virtual network id
  direction:
    type: string
    description: Direction of Policy
  private_net_1_name:
    type: string
    description: Name of private network to be created
  private_net_1_cidr:
    type: string
    description: Private network address (CIDR notation)
  private_net_1_gateway:
    type: string
    description: Private network gateway address
  private_net_1_pool_start:
    type: string
    description: Start of private network IP address allocation pool
  private_net_1_pool_end:
    type: string
    description: End of private network IP address allocation pool
  private_net_2_name:
    type: string
    description: Name of private network to be created
  private_net_2_cidr:
    type: string
    description: Private network address (CIDR notation)
  private_net_2_gateway:
    type: string
    description: Private network gateway address
  private_net_2_pool_start:
    type: string
    description: Start of private network IP address allocation pool
  private_net_2_pool_end:
    type: string
    description: End of private network IP address allocation pool

resources:
  service_template:
    type: OS::Contrail::ServiceTemplate
    properties:
      name: { get_param: name }
      service_mode: { get_param: mode }
      service_type: { get_param: type }
      image_name: { get_param: image }
      flavor: { get_param: flavor }
      interface_type: [
          {
              service_interface_type: "management"
          },
          {
              service_interface_type: "left"
          },
          {
              service_interface_type: "right"
          },
      ]

  service_instance:
    type: OS::Contrail::ServiceInstance
    depends_on: service_template
    properties:
      name: { get_param: name }
      service_template: { get_resource:  service_template}
      scale_out: 
          max_instances: 3
      interface_list: [
          {
              virtual_network: "auto"
          },
          {
              virtual_network: "auto"
          },
          {
              virtual_network: "auto"
          },
      ]

  private_net_1:
    type: OS::Neutron::Net
    properties:
      name: { get_param: private_net_1_name }

  private_net_2:
    type: OS::Neutron::Net
    properties:
      name: { get_param: private_net_2_name }

  private_subnet_1:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net_1 }
      cidr: { get_param: private_net_1_cidr }
      gateway_ip: { get_param: private_net_1_gateway }
      allocation_pools:
        - start: { get_param: private_net_1_pool_start }
          end: { get_param: private_net_1_pool_end }

  private_subnet_2:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net_2 }
      cidr: { get_param: private_net_2_cidr }
      gateway_ip: { get_param: private_net_2_gateway }
      allocation_pools:
        - start: { get_param: private_net_2_pool_start }
          end: { get_param: private_net_2_pool_end }

  private_policy:
    type: OS::Contrail::NetworkPolicy
    depends_on: [ private_net_1, private_net_2, service_instance ]
    properties:
      name: { get_param: policy_name }
      entries:
        policy_rule: [
              { 
                "direction": { get_param: direction }, 
                "protocol": "any", 
                "dst_addresses": [{ "virtual_network": {get_resource: private_net_1}}], 
                "action_list": {"apply_service": [{get_resource: service_instance}]}, 
                "src_addresses": [{ "virtual_network": {get_resource: private_net_2}}] 
              }, 
        ]

  private_policy_attach_net1:
    type: OS::Contrail::AttachPolicy
    depends_on: [ private_net_1, private_policy ]
    properties:
      network_id: { get_resource: private_net_1 }
      policy: { get_attr: [private_policy, fq_name] }

  private_policy_attach_net2:
    type: OS::Contrail::AttachPolicy
    depends_on: [ private_net_2, private_policy ]
    properties:
      network_id: { get_resource: private_net_2 }
      policy: { get_attr: [private_policy, fq_name] }

outputs:
  service_template_fq_name:
    description: FQ name of the service template
    value: { get_attr: [ service_template, fq_name] }
  service_instance_fq_name:
    description: FQ name of the service template
    value: { get_attr: [ service_instance, fq_name] }
  service_instance_vms:
    description: List of service VMs
    value: { get_attr: [ service_instance, virtual_machines] }
  num_active_service_instance_vms:
    description: Number of active service VMs
    value: { get_attr: [ service_instance, active_service_vms] }
